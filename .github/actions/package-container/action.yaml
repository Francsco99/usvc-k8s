name: "Package Container"
description: "Download JAR and Build & Push Docker image"

inputs:
  module:
    description: "Module name (and folder)"
    required: true
  artifact_id:
    description: "Artifact ID of the Maven JAR"
    required: true
  group_id:
    description: "Maven groupId"
    required: true
  image_registry:
    description: "Target image registry"
    required: true
  image_name:
    description: "Name of the Docker image"
    required: true
  repository:
    description: "GitHub repo in format <owner>/<repo>"
    required: true
  github_token:
    description: "GitHub token for Maven download"
    required: true

runs:
  using: "composite"
  steps:
    - name: Debug working directory
      id: debug-working-dir
      run: |
        ls -la
        ls -la ..
      shell: bash

    - name: Extract version from pom.xml
      id: extract-version
      run: |
        POM="${{ inputs.module }}/pom.xml"
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f "$POM")
        echo "Extracted version: $VERSION"
        echo "FINAL_VERSION=$VERSION" >> $GITHUB_ENV
      shell: bash

    - name: Download Maven artifact (JAR)
      id: download-jar
      uses: ./.github/actions/jar-download
      with:
        github-token: ${{ inputs.github_token }}
        groupID: ${{ inputs.group_id }}
        artifactID: ${{ inputs.artifact_id }}
        version: ${{ env.FINAL_VERSION }}
        outputDirectory: ${{ inputs.module }}
        repository: https://maven.pkg.github.com/${{ inputs.repository }}
    
    - name: Debug after JAR download
      id: debug-after-download
      run: |
        ls -la
        ls -la ..
      shell: bash

    - name: List files in module directory
      id: list-module-dir
      run: |
        ls -la ${{ inputs.module }}
      shell: bash

    - name: Find downloaded JAR file
      id: find-jar
      run: |
        # Find the JAR in the module folder
        FILE=$(find "${{ inputs.module }}" -maxdepth 1 -type f -name "${{ inputs.artifact_id }}-*.jar")
        if [[ -z "$FILE" ]]; then
          echo "No JAR found in ${{ inputs.module }}"
          exit 1
        fi
        JAR_NAME=$(basename "$FILE")
        echo "JAR found: $JAR_NAME"
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
      shell: bash

    - name: Show module working directory
      id: debug-module-dir
      run: |
        pwd
        ls -la ${{ inputs.module }}
      shell: bash

    - name: Generate Docker image tags
      id: generate-tags
      run: |
        VERSION_TAG="${{ inputs.image_registry }}/${{ inputs.image_name }}:${{ env.FINAL_VERSION }}"
        IMAGE_TAG=$(echo "$VERSION_TAG" | tr '[:upper:]' '[:lower:]')

        LATEST_TAG="${{ inputs.image_registry }}/${{ inputs.image_name }}:latest"
        LATEST_TAG=$(echo "$LATEST_TAG" | tr '[:upper:]' '[:lower:]')

        echo "IMAGE_TAG=$IMAGE_TAG"
        echo "LATEST_TAG=$LATEST_TAG"
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
      shell: bash

    - name: Set up QEMU
      id: setup-qemu
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: setup-buildx
      uses: docker/setup-buildx-action@v2

    - name: Authenticate Docker registry
      id: docker-login
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.image_registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Build and push Docker image
      id: build-push-image
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.module }}
        push: true
        tags: | 
          ${{ env.IMAGE_TAG }}
          ${{ env.LATEST_TAG }}
        build-args: |
          JAR_NAME=${{ env.JAR_NAME }}

    - name: Show local Docker images
      id: show-docker-images
      run: docker images
      shell: bash
