name: "Package Container"
description: "Download JAR and Build & Push Docker image"
inputs:
  module:
    description: "Module name (and folder)"
    required: true
  artifact_id:
    description: "Artifact ID of the Maven JAR"
    required: true
  version:
    description: "Artifact version"
    required: true
  image_registry:
    description: "Target image registry"
    required: true
  repo:
    description: "GitHub repo in format <owner>/<repo>"
    required: true
  group_id:
    description: "Maven groupId"
    required: true
  github_token:
    description: "GitHub token for Maven download"
    required: true

runs:
  using: "composite"
  steps:
    - name: Debug
      run: |
        ls -la
        ls -la ..
      shell: bash

    - name: Download JAR
      uses: ./.github/actions/jar-download
      with:
        github-token: ${{ inputs.github_token }}
        groupID: ${{ inputs.group_id }}
        artifactID: ${{ inputs.artifact_id }}
        version: ${{ inputs.version }}
        outputDirectory: ${{ inputs.module }}
        repository: https://maven.pkg.github.com/${{ inputs.repo }}

    - name: Show downloaded JAR
      run: ls -la ${{ inputs.module }}
      shell: bash

    - name: Find JAR file
      id: find-jar
      run: |
        # Cerca QUALUNQUE jar nella cartella del modulo che inizi con artifact_id-
        FILE=$(find "${{ inputs.module }}" -maxdepth 1 -type f -name "${{ inputs.artifact_id }}-*.jar")
        if [[ -z "$FILE" ]]; then
          echo "❌ Nessun JAR trovato in ${{ inputs.module }}"
          exit 1
        fi
        JAR_NAME=$(basename "$FILE")
        echo "→ Trovato JAR: $JAR_NAME"
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
      shell: bash


    - name: Pwd & Debug module directory
      run: |
        pwd
        ls -la ${{ inputs.module }}
      shell: bash

    - name: Create image tag (lowercase)
      run: |
        RAW_TAG="${{ inputs.image_registry }}/${{ inputs.module }}:${{ inputs.version }}"
        IMAGE_TAG=$(echo "$RAW_TAG" | tr '[:upper:]' '[:lower:]')
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      shell: bash

    - name: Build Docker image
      run: |
        docker build \
          --build-arg JAR_NAME=${{ env.JAR_NAME }} \
          -t ${{ env.IMAGE_TAG }} \
          ${{ inputs.module }}
      shell: bash

    - name: Show Docker images
      run: docker images
      shell: bash
